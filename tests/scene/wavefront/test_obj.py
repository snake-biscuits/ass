from bsp_tool.scene import wavefront
from bsp_tool.utils import geometry
from bsp_tool.utils import vector


def test_dummy():
    # generate cube
    vertices = [
        vector.vec3(i >> 2, i >> 1 & 1, i & 1)
        for i in range(8)]
    quads = [
        ((0b000, 0b001, 0b011, 0b010), vector.vec3(x=-1)),
        ((0b000, 0b001, 0b101, 0b100), vector.vec3(y=-1)),
        ((0b000, 0b100, 0b110, 0b010), vector.vec3(z=-1)),
        ((0b100, 0b101, 0b111, 0b110), vector.vec3(x=1)),
        ((0b010, 0b011, 0b111, 0b110), vector.vec3(y=1)),
        ((0b001, 0b101, 0b111, 0b011), vector.vec3(z=1))]
    polygons = [
        geometry.Polygon([
            geometry.Vertex(vertices[i], n)
            for i in idxs])
        for idxs, n in quads]
    model = geometry.Model([geometry.Mesh(polygons=polygons)])

    # test .obj file contents
    lines = list(wavefront.Obj.from_models([model]).lines())
    assert lines[:4] == [
        "# generated by bsp_tool.extensions.geometry",
        "g group_000",
        "o model_000",
        "usemtl default"]

    line_no = 4
    for indices, normal in quads:
        for index in indices:
            vertex = vertices[index]
            assert lines[line_no:line_no + 2] == [
                f"v {vertex.x} {vertex.y} {vertex.z}",
                f"vn {normal.x} {normal.y} {normal.z}"]
            line_no += 2
        assert lines[line_no] == "f -1//-1 -2//-2 -3//-3 -4//-4"
        line_no += 1

    assert len(lines) == 4 + 2 * 4 * len(quads) + len(quads)
